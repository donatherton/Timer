#!/usr/bin/env python3

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <https://www.gnu.org/licenses/>.
#
# Author: Don Atherton
# Web: donatherton.co.uk
# Timer (c) Don Atherton don@donatherton.co.uk

import gi
gi.require_version("Gtk", "3.0")
from gi.repository import Gtk
import time
from datetime import datetime, timedelta
from os import path, sep, system


class Timer(Gtk.Window):
    """ Creates timer gtk object """
    def __init__(self):
        super().__init__()
        self.path = path.dirname(__file__)

        self.set_default_size(200, 240)
        self.set_border_width(10)
        self.set_title('Timer')
        try:
            self.set_icon_from_file(self.path + sep + 'hourglass.png')
        except Exception as e:
            print(e)

        container = Gtk.VBox()
        self.add(container)

        self.hrs = self.create_spinbutton(12, container)
        self.mins = self.create_spinbutton(59, container, 5)
        self.secs = self.create_spinbutton(59, container)

        self.countdown = Gtk.Label()
        container.pack_start(self.countdown, True, True, 5)
        self.countdown.set_margin_top(5)

        self.progress_bar = Gtk.ProgressBar()
        container.pack_start(self.progress_bar, True, True, 5)

        self.go_button = Gtk.ToggleButton(label='Start/Pause')
        self.go_button.connect('clicked', self.begin_timing)
        container.pack_start(self.go_button, True, True, 0)

        self.cancel = Gtk.Button(label='Cancel')
        self.cancel.connect('clicked', exit)
        container.pack_start(self.cancel, True, True, 0)

        self._seconds_remaining = 0
        self._remaining = None

    def create_spinbutton(self, upper, container, default=0):
        """ Spinbuttons to set time """
        adjustment = Gtk.Adjustment(upper=upper,
                                    step_increment=1,
                                    page_increment=1)
        spin_button = Gtk.SpinButton()
        spin_button.set_adjustment(adjustment)
        spin_button.set_value(default)
        container.pack_start(spin_button, True, True, 5)
        return spin_button

    def begin_timing(self, go_button):
        """ Can't change once going, so freeze these """
        self.hrs.set_editable(False)
        self.mins.set_editable(False)
        self.secs.set_editable(False)
        # Get values
        if self._remaining is None:
            h = self.hrs.get_value_as_int()
            m = self.mins.get_value_as_int()
            s = self.secs.get_value_as_int()

            self._seconds_remaining = h * 3600 + m * 60 + s
            # Stop alarm going off if 0 seconds
            if self._seconds_remaining == 0:
                self.go_button.set_active(False)
                return
            alarm_time = datetime.now() + timedelta(seconds=self._seconds_remaining)
        else:
            alarm_time = datetime.now() + timedelta(seconds=self._remaining)
        # Main loop
        while (datetime.now() < alarm_time) and self.go_button.get_active():
            self._remaining = alarm_time.timestamp() - datetime.now().timestamp()
            time_remaining = time.strftime("%H:%M:%S", time.gmtime(self._remaining))

            self.set_title('Time left: ' + time_remaining)

            self.countdown.set_markup('<span size=\"large\"><b>' + time_remaining + '</b></span>')

            progress = round((1000 - 1000 * self._remaining / self._seconds_remaining) / 10)
            # Prog bar doesn't get to the end. This weird algorithm makes it look better
            self.progress_bar.set_fraction((progress + (progress / self._seconds_remaining)) / 100)

            # Listen for events
            while Gtk.events_pending():
                Gtk.main_iteration()

            time.sleep(1)
        else:
            # While paused
            while Gtk.events_pending() and not go_button.get_active():
                Gtk.main()
                time.sleep(1)
        # Time up
        system('notify-send "Time up"')
        for _ in range(3):
            # TODO find a way to sound alarm without relying on specific apps
            system('paplay ' + self.path + sep + 'alarm.wav --volume 30000')
        exit()


if __name__ == '__main__':
    timer = Timer()
    timer.connect("destroy", exit)
    timer.show_all()
    Gtk.main()
